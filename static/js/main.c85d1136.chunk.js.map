{"version":3,"sources":["mounting/errorBoundary.js","mounting/render-channels/processing-data.js","mounting/render-channels/render-channels.js","mounting/controller.js","mounting/url-param/urlParam.js","mounting/modulesDom/content.js","mounting/modulesDom/additionalBlock.js","reportWebVitals.js","mounting/mount-dom.js","index.js"],"names":["ErrorBoundary","props","state","hasError","this","className","children","error","React","Component","processingData","id","data","ammountChannels","lastpogination","document","querySelector","countPage","Number","innerHTML","poginationChannels","renderingChannels","activePage","pogination","Math","ceil","i","push","sign","count","length","paramRender","renderChannels","renderData","List","listItems","channelsName","srcImage","genres","country","duration","rating","url","summary","name","image","medium","network","code","runtime","average","replace","href","src","alt","ListPage","listPage","ReactDOM","render","StrictMode","list","getElementById","controller","statementID","statement","working","a","window","scroll","fetch","responce","json","getData","Content","console","log","AdditionalBlock","onClick","link","addition","propTypes","PropTypes","string","object","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Mount","useState","setStatement","map","status","func","bool"],"mappings":"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","file":"static/js/main.c85d1136.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n  static getDerivedStateFromError(error) {\r\n    // Обновить состояние с тем, чтобы следующий рендер показал запасной UI.\r\n    return { hasError: true }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // Можно отрендерить запасной UI произвольного вида\r\n      return <div className=\"error-critical\">Ошибка получения данных</div>\r\n    }\r\n\r\n    return this.props.children; \r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import PropTypes from 'prop-types'\r\n\r\n// Процессинг\r\n// функционал: подготовка данных для рендеринга\r\nexport default function processingData(id, data, ammountChannels) {\r\n    //чтобы каждый раз не ходить по api можно зашить в сторю, но это тех решение на усмотрение заказчика\r\n    //localStorage.setItem('channels', JSON.stringify(data))\r\n\r\n    let lastpogination = document.querySelector('.activePage')\r\n    let countPage = 0\r\n    if (lastpogination!==null) {\r\n      countPage = Number(lastpogination.innerHTML)\r\n    }\r\n    \r\n\r\n    let poginationChannels = [];\r\n    let renderingChannels = [];\r\n    let activePage = 0\r\n    let pogination = Math.ceil(Number(ammountChannels)/50)\r\n      for (let i = 1; i<=pogination; i++) {\r\n        poginationChannels.push(i)\r\n        }  \r\n\r\n    if (id === 'previousChannels') {\r\n      countPage -= 2\r\n    }\r\n    let valPage = Math.sign(countPage)\r\n    if (valPage === -1) {\r\n      countPage = 0\r\n    }\r\n    const staticParam = 49\r\n    if (lastpogination===null) {\r\n      let count = 0\r\n      \r\n      for (let i = 0; i<=count+staticParam; i++) {\r\n          renderingChannels.push(data[i])\r\n      }\r\n      activePage = 1\r\n    } else {\r\n      if (countPage === poginationChannels[poginationChannels.length - 1]) {\r\n        countPage = poginationChannels[poginationChannels.length - 1]\r\n      }\r\n      for (let i = (countPage)*50; i<=(countPage)*50+staticParam; i++) {\r\n        if (ammountChannels>i) {\r\n          renderingChannels.push(data[i])\r\n          activePage = countPage+1\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n    }\r\n    \r\n    let renderData = {renderingChannels, poginationChannels, activePage, paramRender : true}\r\nreturn renderData\r\n}\r\n\r\nprocessingData.propTypes = {\r\n  id: PropTypes.string,\r\n  data: PropTypes.object,\r\n  ammountChannels: PropTypes.string\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\n// Рендеринг\r\n// функционал: рендеринг с использование нового ReactDOM.render\r\nexport default function renderChannels(renderData, ammountChannels) {\r\n\r\n  function List(props) {\r\n    let listItems = []\r\n    if (ammountChannels===0) {\r\n       listItems = <div>Отсутствуют данные</div>\r\n    } else {\r\n      let channelsName = ''\r\n      let srcImage = ''\r\n      let genres = ''\r\n      let country = ''\r\n      let duration = ''\r\n      let rating = ''\r\n      let url = ''\r\n      let summary = ''\r\n      for (let i = 0;i<=renderData.renderingChannels.length-1;i++) {\r\n        try {\r\n          channelsName = renderData.renderingChannels[i].name\r\n        } catch {\r\n          channelsName = 'не удалось получить данные'\r\n        }\r\n        try {\r\n          srcImage = renderData.renderingChannels[i].image.medium\r\n        } catch {\r\n          srcImage = 'не удалось получить данные'\r\n        }\r\n        try {\r\n          genres = renderData.renderingChannels[i].genres[0]\r\n        } catch {\r\n          genres = 'не удалось получить данные'\r\n        }\r\n        try {\r\n          country = renderData.renderingChannels[i].network.country.code\r\n        } catch {\r\n          country = 'не удалось получить данные'\r\n        }\r\n        try {\r\n          duration = renderData.renderingChannels[i].runtime + ' min'\r\n        } catch {\r\n          duration = 'не удалось получить данные'\r\n        }\r\n        try {\r\n          rating = renderData.renderingChannels[i].rating.average\r\n        } catch {\r\n          rating = 'не удалось получить данные'\r\n        }\r\n        try {\r\n          url = renderData.renderingChannels[i].url\r\n        } catch {\r\n          url = 'не удалось получить данные'\r\n        }\r\n        try {\r\n          summary = renderData.renderingChannels[i].summary.replace(/<\\/?[a-zA-Z]+>/gi,'');\r\n        } catch {\r\n          summary = 'не удалось получить данные'\r\n        }\r\n\r\n\r\n        listItems[i] = \r\n        <div id ={renderData.renderingChannels[i].id}  key={channelsName+i}>\r\n          <a href={url} className='channel'>\r\n            <img src={srcImage} alt={channelsName}/>\r\n            <span id='information-channelsName'>{channelsName}</span>\r\n            <span id='information-genres'>{genres}</span>\r\n            <span id='information-country'>{country}</span>\r\n            <span id='information-duration'>{duration}</span>\r\n            <span id='information-rating'>{rating}</span>\r\n            <div id='info'>{summary}</div>\r\n          </a>\r\n        </div>\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"content-item-channels\" id='channelsTV'>{listItems}</div>\r\n    );\r\n  }\r\n\r\n  function ListPage(props) {\r\n    let listPage = []\r\n    for (let i = 0;i<=renderData.poginationChannels.length-1;i++) {\r\n      if (renderData.activePage-1 === i) {\r\n        listPage[i] = \r\n        <div id ={'page' + renderData.poginationChannels[i]} className='activePage' key={'activePage'+renderData.poginationChannels[i]}>\r\n          {renderData.poginationChannels[i]}\r\n        </div>\r\n      } else {\r\n        listPage[i] = \r\n        <div id ={'page' + renderData.poginationChannels[i]}  key={renderData.poginationChannels[i]}>\r\n          {renderData.poginationChannels[i]}\r\n        </div>\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"content-page-channels\" id='pageTV'>{listPage}</div>\r\n    );\r\n  }\r\n\r\n    ReactDOM.render(\r\n      <React.StrictMode>\r\n        <List list={renderData.renderingChannels} />\r\n        <ListPage listPage={renderData} />\r\n      </React.StrictMode>,\r\n      document.getElementById('content'),\r\n    )\r\n}\r\n\r\nrenderChannels.propTypes = {\r\n  ammountChannels: PropTypes.number,\r\n  renderData: PropTypes.object\r\n}","import getUrl from './url-param/urlParam'\r\nimport processingData from './render-channels/processing-data'\r\nimport renderChannels from './render-channels/render-channels'\r\nimport PropTypes from 'prop-types'\r\n\r\n// Контроллер\r\n// функционал: получение и обработка данных, отправка их на рендеринг\r\nexport default function controller(id, statementID) {\r\n  async function getData(url, statement) {\r\n    function working() {\r\n      let ammountChannels = Number(data.length)\r\n      if (ammountChannels > 0 && statement === 'not successful') {\r\n        // модуль обработки данных для рендеринга\r\n        renderData = processingData(id, data, ammountChannels); \r\n      } else {\r\n        renderData = {paramRender : true}\r\n      }\r\n        // модуль рендеринга данных\r\n        if (renderData.paramRender === true && statement === 'not successful' && renderData.renderingChannels.length > 0) {\r\n          renderChannels(renderData, ammountChannels)\r\n          window.scroll(-0, -0);\r\n        }\r\n    }\r\n\r\n    const responce = await fetch(url)\r\n    let data = await responce.json()\r\n    working()\r\n    statement = 'successfully'\r\n  }\r\n\r\n  // получение ссылки по id вызываемого элемента\r\n  let url = getUrl()\r\n  let statement = 'not successful'\r\n  let renderData = {}\r\n\r\n  getData(url, statement)\r\n}\r\n\r\ncontroller.propTypes = {\r\n  id: PropTypes.string\r\n}","export default function getUrl (id) {\r\n  //получаем ссылку для fetch\r\n  let value = 'https://api.tvmaze.com/shows?page=1'\r\n  return value\r\n}","import React from 'react';\r\nimport controller from '../controller'\r\nimport PropTypes from 'prop-types'\r\n\r\n//для рендера блока контента\r\nexport default function Content(props) {\r\n    console.log('1 content: render main container')\r\n    let lastChannels = document.querySelector('#channelsTV')\r\n    if (lastChannels==null) {\r\n        controller('mount',props.state.id) //на вход - Id элемента\r\n    } \r\n    \r\n    return <div className=\"content-block\" id={props.state.id}>\r\n            <div className=\"content-item-text channel\" id=\"text-content\">\r\n                <span id=\"information-image\">Обложка</span>\r\n                <span id=\"information-channelsName\">Название</span>\r\n                <span id=\"information-genres\">Жанр</span>\r\n                <span id=\"information-country\">Страна</span>\r\n                <span id=\"information-duration\">Длительность</span>\r\n                <span id=\"information-rating\">Рейтинг</span>\r\n            </div>\r\n            <div className=\"content-item-main\" id=\"content\">\r\n            </div>\r\n           </div>\r\n}\r\n\r\nContent.propTypes = {\r\n    lastChannels: PropTypes.string\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//добавляем блок отвечающий за подгрузку данных в блок контента\r\nexport default function AdditionalBlock({ state, onClick }) {\r\n  let id = state.id\r\n  let link = ''\r\n  console.log('2 additionBlock: render additional and active element '+id+' (state '+state.addition+')')\r\n  if (id==='moreChannels') { \r\n    link = 'gonext_103393.svg'\r\n  } else {\r\n    link = 'goprevious_103394.svg'\r\n  }\r\n\r\n\r\n    return <div className=\"additional-block\" id=\"additional\">\r\n      <img className=\"rotate\" src={link} alt=\"click here\" onClick={() => onClick(id)} id={id}> \r\n      </img>\r\n    </div>\r\n};\r\n\r\nAdditionalBlock.propTypes = {\r\n  onClick: PropTypes.func,\r\n  id: PropTypes.string\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ErrorBoundary from './errorBoundary'\nimport Content from './modulesDom/content'\nimport AdditionalBlock from './modulesDom/additionalBlock'\nimport PropTypes from 'prop-types'\nimport reportWebVitals from '../reportWebVitals'\nimport controller from './controller'\n\nexport default function Mount() {\n  //константы для работы со state и данные для рендеринга\n  const [statement, setStatement] = React.useState ([\n    { id: 'contentUser', addition: false },\n    { id: 'previousChannels', addition: false },\n    { id: 'moreChannels', addition: false }\n  ])\n\n  function onClick (id) {\n    console.log('0 MountDom: check ID for repalce addition')\n    setStatement(statement.map(status => {\n      if (status.id === id ) {\n        status.addition = true\n        controller(id,statement[1].id) //на вход - Id элемента\n      \n      }\n      return status\n    })\n    )\n    // включи для дебага, чтобы узнать время обработки данных\n    reportWebVitals(console.log)\n  }\n  \n  return (\n    <div className=\"app-mount\">\n    <div className=\"react-main-component\">\n      <ErrorBoundary>\n        <Content state={statement[0]} key={statement[0].id}/>\n      </ErrorBoundary>\n      <div className=\"prevNext\">\n        <ErrorBoundary>\n          <AdditionalBlock state={statement[1]} onClick={onClick} key={statement[1].id}/>\n        </ErrorBoundary>\n        <ErrorBoundary>\n          <AdditionalBlock state={statement[2]} onClick={onClick} key={statement[2].id}/>\n        </ErrorBoundary>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nAdditionalBlock.propTypes = {\n  onClick: PropTypes.func,\n  id: PropTypes.string,\n  addition: PropTypes.bool\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Mount from './mounting/mount-dom.js';\n\nReactDOM.render(\n    <Mount />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}